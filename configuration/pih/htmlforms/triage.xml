<htmlform id="mch-triage-form"
          formUuid="ae39663d-c248-4cee-b48e-5eb226f74e47"
          formName="MCOE Triage"
          formEncounterType="41911448-71a1-43d7-bba8-dc86339850da"
          formVersion="1.0">

    <macros>
        <macro key="mcoeTriageLocation" value="f85feffc-fe54-4648-aa14-01ed6d30b943"/>
    </macros>

    <translations defaultLocale="en">
        <code name="o2Sat">
            <variant locale="en" value="O&lt;sub&gt;2&lt;/sub&gt; Sat"/>
            <variant locale="fr" value="SpO&lt;sub&gt;2&lt;/sub&gt;"/>
            <variant locale="es" value="SatO&lt;sub&gt;2&lt;/sub&gt;"/>
        </code>
    </translations>

    <style type="text/css">
        #who-when-where {
            margin-bottom: 6px;
            border-bottom: 1px solid #ccc;
        }

        #who-when-where p {
            display: inline-block;
            padding-right: 20px;
        }

        #where > input[type=text] {
            display: inline-block;
        }

        input.legalValue {
            background-color: white;
        }

        .field-error {
            color: #ff6666;
            font-size: 1.1em;
            display: block;
        }

        #mch-triage-form, .exam input[type="checkbox"] {
            margin: 0px 5px; /* changed values to vertical, horizontal */
            top: 5px; /* added to offset the checkbox position to line up */
        }

        .exam label { /*new definition to override labels inside section-containers*/
            margin: 0px;
        }

        .row-symptom {
            margin-top: 20px;
        }

        .six-columns, .five-columns, .four-columns, .three-plus-one, .three-columns, .two-columns {
            display: table;
            height: 100%;
            width: 100%;
        }

        .six-columns > div {
            display: table-cell;
            width: 16.6%;
        }

        .five-columns > div {
            display: table-cell;
            width: 20%;
        }

        .two-columns > div {
            display: table-cell;
            width: 50%;
        }

        .three-columns > div {
            display: table-cell;
            width: 33%;
        }

        .three-plus-one > div {
            display: table-cell;
        }

        .three-plus-one > div {
            width: 29%;
            margin-top: 20px;
        }

        .three-plus-one > div:first-child {
            width: 13%;
        }

        .three-plus-one {
            margin-bottom: 20px;
        }

        .four-columns > div {
            display: table-cell;
            width: 25%;
        }

        .boundary {
            margin-bottom: 6px;
            border-bottom: 1px solid #ccc;
        }

        .header-col {
            text-align: center;
            white-space: pre-line;
        }

        .side-by-side label {
            display: inline-block;
        }

        .side-by-side span {
            display: inline-block;
        }

        form input[type="radio"], .form input[type="radio"] {
            float: none;
            display: inline-block;
        }

        p.radio > * {
            display: inline;
            float: none !important;
            min-width: initial;
        }

        .side-by-side input[type="checkbox"] {
            float: none;
            display: inline-block;
        }

        .vitals span, .complaint span {
            float: none;
            display: inline-block;
        }

        .vitals input[type="text"] {
            max-width: 60px;
        }

        .vitals-values input[type="text"] {
            color: black;
        }

        #chief_complaint {
            min-width: 80%;
        }

        .headerLabel {
            font-size: 1.2em;
            color: #3E3E3E;
        }

        .triage-label-green {
            background-color: #5cb85c;
        }

        .triage-label-yellow {
            background-color: #e8e457;
        }

        .triage-label-red {
            background-color: #d9534f;
        }

        #sticky {
            padding: 0.5ex;
            height: 50px;
            width: 940px;
            transition: box-shadow 400ms;
        }

        #sticky.stick {
            position: fixed;
            top: 0;
            z-index: 2;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.4);
        }
        #status-div {
            color: #fff;
            text-align: center;
        }

        #isolationMsg {
            color: red;
            font-weight: bold;
            display:none;
        }

        .list-inline label, .list-inline input[type="radio"], .list-inline span,
        .list-inline-wide label, .list-inline-wide input[type="radio"], .list-inline-wide span,
        .list-inline-extra-wide label, .list-inline-extra-wide input[type="radio"], .list-inline-extra-wide span {
            display: inline-block;
            float: none;
        }

        .list-inline label:first-child {
            width: 220px;
        }

        .list-inline-wide label:first-child {
            width: 320px;
        }

        .list-inline-extra-wide label:first-child {
            width: 420px;
        }

    </style>

    <ifMode mode="VIEW" include="false">
        <script type="text/javascript">
            jq(document).ready(function() {

                const normalPriority = '<lookup expression="fn.getConcept('CIEL:1115').id"/>';
                const emergencyPriority = '<lookup expression="fn.getConcept('PIH:Emergency').id"/>';

                const priorities = {
                    GREEN: {
                        value: 0,
                        message: "Normal",
                        className: "triage-label-green",
                        queuePriority: normalPriority
                    },
                    YELLOW: {
                        value: 1,
                        message: "Urgent",
                        className: "triage-label-yellow",
                        queuePriority: emergencyPriority
                    },
                    RED: {
                        value: 2,
                        message: "Emergency",
                        className: "triage-label-red",
                        queuePriority: emergencyPriority
                    }
                };
                function getPrioritiesClasses() {
                    let classNames = [];
                    for (const priority in priorities) {
                        classNames.push(priorities[priority].className);
                    }
                    return classNames.join(" ");
                }
                const classNames = getPrioritiesClasses();

                function sticky_relocate() {
                    var window_top = jq(window).scrollTop();
                    var div_top = jq('#sticky-anchor').offset().top;
                    if (window_top &gt; (div_top + 30 ) ) {
                        jq('#sticky').addClass('stick');
                        jq('#sticky-anchor').height(jq('#sticky').outerHeight());
                    } else if (window_top &lt; (div_top - 70 )) {
                        jq('#sticky').removeClass('stick');
                        jq('#sticky-anchor').height(0);
                    }
                }
                function evaluateBpSystolic(value) {
                    let retValue = priorities.GREEN;
                    if (value != null &amp;&amp; !(Number.isNaN(value)) ) {
                        let numericValue = Number(value);
                        if (numericValue &lt; 80) {
                            return priorities.RED;
                        } else if ((numericValue &gt; 139) &amp;&amp; (numericValue &lt; 160)) {
                            return priorities.YELLOW;
                        } else if (numericValue &gt; 159) {
                            return priorities.RED;
                        }
                    }
                    return retValue;
                }

                function evaluateBpDiastolic(value) {
                    let retValue = priorities.GREEN;
                    if (value != null &amp;&amp; !(Number.isNaN(value)) ) {
                        let numericValue = Number(value);
                        if (numericValue &lt; 51) {
                            return priorities.RED;
                        } else if ((numericValue &gt; 89) &amp;&amp; (numericValue &lt; 110)) {
                            return priorities.YELLOW;
                        } else if (numericValue &gt; 109) {
                            return priorities.RED;
                        }
                    }
                    return retValue;
                }

                function evaluateHeartRate(value) {
                    let retValue = priorities.GREEN;
                    if (value != null &amp;&amp; !(Number.isNaN(value)) ) {
                        let numericValue = Number(value);
                        if (numericValue &lt; 110) {
                            return priorities.GREEN;
                        } else if ((numericValue &gt; 109) &amp;&amp; (numericValue &lt; 120)) {
                            return priorities.YELLOW;
                        } else if (numericValue &gt; 119) {
                            return priorities.RED;
                        }
                    }
                    return retValue;
                }

                function evaluateRespiratoryRate(value) {
                    let retValue = priorities.GREEN;
                    if (value != null &amp;&amp; !(Number.isNaN(value)) ) {
                        let numericValue = Number(value);
                        if (numericValue &lt; 20) {
                            return priorities.GREEN;
                        } else if ((numericValue &gt; 19) &amp;&amp; (numericValue &lt; 30)) {
                            return priorities.YELLOW;
                        } else if (numericValue &gt; 29) {
                            return priorities.RED;
                        }
                    }
                    return retValue;
                }

                function evaluateTemperature(value) {
                    let retValue = priorities.GREEN;
                    if (value != null &amp;&amp; !(Number.isNaN(value)) ) {
                        let numericValue = Number(value);
                        if ( (numericValue &lt; 35) || (numericValue &gt;= 38) ) {
                            return priorities.RED;
                        } else if ((numericValue &gt; 37.6) &amp;&amp; (numericValue &lt; 38)) {
                            return priorities.YELLOW;
                        }
                    }
                    return retValue;
                }

                function evaluateFhr(value) {
                    let retValue = priorities.GREEN;
                    if (value != null &amp;&amp; !(Number.isNaN(value)) ) {
                        let numericValue = Number(value);
                        if ( (numericValue &lt; 80) || (numericValue &gt;= 200) ) {
                            return priorities.RED;
                        } else if ( (numericValue &lt; 101) || (numericValue &gt; 159) ) {
                            return priorities.YELLOW;
                        }
                    }
                    return retValue;
                }

                function evaluateOxigenSaturation(value) {
                    let retValue = priorities.GREEN;
                    if (value != null &amp;&amp; !(Number.isNaN(value)) ) {
                        let numericValue = Number(value);
                        if ( numericValue &lt;= 92 ) {
                            return priorities.RED;
                        } else if ( (numericValue &gt; 92) &amp;&amp; (numericValue &lt; 95) ) {
                            return priorities.YELLOW;
                        }
                    }
                    return retValue;
                }

                let vitalsInfo = {
                    bp_systolic: {
                        evaluate: evaluateBpSystolic,
                        value: null
                    },
                    bp_diastolic: {
                        evaluate: evaluateBpDiastolic,
                        value: null
                    },
                    heart_rate: {
                        evaluate: evaluateHeartRate,
                        value: null
                    },
                    respiratory_rate: {
                        evaluate: evaluateRespiratoryRate,
                        value: null
                    },
                    temperature_c: {
                        evaluate: evaluateTemperature,
                        value: null
                    },
                    o2_sat: {
                        evaluate: evaluateOxigenSaturation,
                        value: null
                    },
                    fhr: {
                        evaluate: evaluateFhr,
                        value: null
                    }
                };

                function evaluateVitals() {
                    let priority = priorities.GREEN;
                    for (const obj in vitalsInfo) {
                        let vitalValue = vitalsInfo[obj].value;
                        let evalPriority = vitalsInfo[obj].evaluate(vitalValue);
                        if (evalPriority.value &gt; priority.value ) {
                            priority = evalPriority;
                        }
                    }
                    return priority;
                }

                function evaluateSymptoms() {
                    let priority = priorities.GREEN;
                    jq('.redObs').each(function(index, element) {
                        let firstCheckbox = jq(this).children(":checkbox:first").prop('checked');
                        if (firstCheckbox == true) {
                            priority = priorities.RED;
                        }
                    });
                    if (priority.value &gt; priorities.GREEN.value) {
                        return priority;
                    }
                    jq('.yellowObs').each(function(index, element) {
                        let firstCheckbox = jq(this).children(":checkbox:first").prop('checked');
                        if (firstCheckbox == true) {
                            priority = priorities.YELLOW;
                        }
                    });
                    return priority;
                }

                function calculatePriority() {
                    let globalPriority = null;
                    let vitalsPriority =  evaluateVitals();
                    let symptomsPriority = evaluateSymptoms();
                    if ( vitalsPriority.value &gt; symptomsPriority.value ) {
                        globalPriority = vitalsPriority;
                    } else {
                        globalPriority = symptomsPriority;
                    }
                    jq('#sticky').removeClass(classNames).addClass(globalPriority.className);
                    jq('#statusMessage').text(globalPriority.message);
                    return globalPriority;
                }

                jq(".vitals-values").find('input').on("blur", function() {
                    const vitalsId = jq(this).closest("span").attr('id');
                    const vitalValue = jq(this).val();
                    let inputElement = jq(this);
                    jq(inputElement).removeClass('legalValue');
                    jq(inputElement).removeClass(classNames);
                    if (vitalsId) {
                        if (vitalValue) {
                            vitalsInfo[vitalsId].value = vitalValue;
                            let vitalsPriority = vitalsInfo[vitalsId].evaluate(vitalsInfo[vitalsId].value);
                            if ( vitalsPriority ) {
                                setTimeout( () => {
                                    jq(inputElement).removeClass('legalValue').addClass(vitalsPriority.className);
                                } , 100);
                            }
                        } else {
                            vitalsInfo[vitalsId].value = null;
                            setTimeout( () => {
                                jq(inputElement).addClass('legalValue');
                            }, 100);
                        }
                    }
                    calculatePriority();
                });

                function evaluateTBScreening() {
                    let isSymptomPresent = true;
                    jq(".tbScreen").find("input[type='radio'][value='3410']").each( function(index) {
                        isSymptomPresent = isSymptomPresent &amp;&amp; this.checked;
                    });
                    return isSymptomPresent;
                }

                function evaluateEbolaScreening() {
                    let isSymptomPresent = true;
                    jq(".isolation").find("input[type='checkbox']").each( function(index) {
                        isSymptomPresent = isSymptomPresent &amp;&amp; this.checked;
                    });
                    return isSymptomPresent;
                }

                function evaluateIsolationStatus() {
                    let status = evaluateEbolaScreening() || evaluateTBScreening();
                    if ( status ) {
                        jq("#isolationMsg").show();
                    } else {
                        jq("#isolationMsg").hide();
                    }
                    return status;
                }

                jq(".isolation").find("input[type='checkbox']").change( function(event) {
                    evaluateIsolationStatus();
                });

                jq(".tbScreen").find("input[type='radio']").change( function(event) {
                    evaluateIsolationStatus();
                });

                jq('.normalObs').change(function(event) {
                    var firstCheckbox = jq(this).children(":checkbox:first").prop('checked');
                    if (firstCheckbox == true) {
                        var parentDiv = jq(this).closest('.exam');
                        if (parentDiv != null) {
                            jq(parentDiv).find('.abnormalObs').each(function(index, element) {
                                jq(this).children(":checkbox:first").prop('checked', false);
                            });
                        }
                    }
                    calculatePriority();
                });

                jq('.abnormalObs').change(function(event) {
                    var firstCheckbox = jq(this).children(":checkbox:first").prop('checked');
                    if (firstCheckbox == true) {
                        var parentDiv = jq(this).closest('.exam');
                        if (parentDiv != null) {
                            jq(parentDiv).find('.normalObs').each(function(index, element) {
                                jq(this).children(":checkbox:first").prop('checked', false);
                            });
                        }
                    }
                    calculatePriority();
                });

                jq('.normalQueue').change(function(event) {
                    let normalQueue = jq(this).children("input[type='radio']:checked").val();
                    if (normalQueue) {
                        let parentDiv = jq(this).closest(".referralService");
                        if (parentDiv) {
                            jq(parentDiv).find(".emergencyQueue").children("input[type='radio']").prop('checked', false);
                        }
                    }
                });
                jq('.emergencyQueue').change(function(event) {
                    let emergencyQueue = jq(this).children("input[type='radio']:checked").val();
                    if (emergencyQueue) {
                        let parentDiv = jq(this).closest(".referralService");
                        if (parentDiv) {
                            jq(parentDiv).find(".normalQueue").children("input[type='radio']").prop('checked', false);
                        }
                    }
                });

                function setPriority(priority) {
                    jq("#priority").children("input").each(function() {
                        let attrVal = jq(this).attr("value");
                        if ( attrVal == priority ) {
                            jq(this).prop("checked", true);
                        }
                    });
                }

                beforeSubmit.push(function() {
                    setPriority(normalPriority);
                    let globalPriority = calculatePriority();
                    setPriority(globalPriority.queuePriority);
                    return true;
                });

                jq(window).scroll(sticky_relocate);
                sticky_relocate();
                jq(".vitals-values").find('input').attr('autocomplete', 'off');
                jq(".vitals-values").find('input').trigger("blur");
                calculatePriority();
                evaluateIsolationStatus();
            });
        </script>
    </ifMode>

    <ifMode mode="VIEW" include="false">
        <div id="sticky-anchor"></div>
        <div class="panel triage-label-green" role="progressbar" aria-valuenow="100"
             aria-valuemin="0" aria-valuemax="100" id="sticky">
            <div>
                <h3>
                    <div id="status-div" class="row">
                        <div class="col-sm-2"><uimessage code="Status"/></div>
                        <div class="col-sm-7 center-content">
                            <span id="statusMessage"></span>
                        </div>
                        <div class="col-sm-3 right">
                            <span></span>
                        </div>
                    </div>
                </h3>
            </div>
        </div>

        <h2><uimessage code="National Obstretic Triage and Treatment Form"/></h2>
            <div id="who-when-where" class="three-columns">
                <div style="width: 34%">
                    <p id="who" class="side-by-side">
                        <label><uimessage code="emr.patientDashBoard.providerRequired"/></label>
                        <span><encounterProviderAndRole default="currentUser" encounterRole="4f10ad1a-ec49-48df-98c7-1391c6ac7f05" required="true"/></span>
                    </p>
                </div>
                <div style="width: 30%">
                    <p id="where" class="side-by-side">
                        <label><uimessage code="emr.locationRequired"/></label>
                        <encounterLocation required="true" default="$mcoeTriageLocation" tags="MCH Triage Location"/>
                    </p>
                </div>
                <div style="width: 15%">
                    <p id="when" class="side-by-side">
                        <label><uimessage code="emr.patientDashBoard.date"/></label>
                        <encounterDate id="encounterDate" default="now" showTime="false"/>
                    </p>
                </div>
            </div>
    </ifMode>

    <div class="two-columns">
        <div>
            <p class="side-by-side">
                <label>
                    <uimessage code="Gestational age (weeks)"/>:&amp;nbsp;&amp;nbsp;
                </label>
                <obs conceptId="CIEL:165425" id="gestationalAge"/>
            </p>
        </div>
        <div>
            <p class="side-by-side">
                <label>
                    <uimessage code="pihcore.mch.grava"/>:&amp;nbsp;&amp;nbsp;
                </label>
                <obs conceptId="CIEL:5624" id="gravida"/>
                <label>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
                    <uimessage code="pihcore.mch.para"/>:&amp;nbsp;&amp;nbsp;
                </label>
                <obs conceptId="CIEL:1053" id="para"/>
            </p>
        </div>
    </div>

    <div class="complaint">
        <p class="side-by-side">
            <label>
                <uimessage code="Main complaint"/>:&amp;nbsp;&amp;nbsp;
            </label>
            <obs conceptId="CIEL:160531" id="chief_complaint"/>
        </p>
    </div>

    <div class="vitals six-columns">
        <div>
            <label>
                <uimessage code="mirebalais.vitals.bloodPressure.short.title"/>
            </label>
            <span class="small">
                <ifMode mode="VIEW" include="true">
                    <span class="append-to-value">
                        <obs conceptId="CIEL:5085" id="bp_systolic" />
                    </span>
                    <span class="append-to-value">/</span>
                    <span class="append-to-value">
                        <obs conceptId="CIEL:5086" id="bp_diastolic" />
                    </span>
                    <span class="append-to-value">mm/Hg</span>
                </ifMode>
                <ifMode mode="VIEW" include="false">
                    <span class="append-to-value left">
                        <obs conceptId="CIEL:5085" id="bp_systolic" class="vitals-values"/>
                    </span>
                    <span class="append-to-value left">/</span>
                    <span class="append-to-value left">
                        <obs conceptId="CIEL:5086" id="bp_diastolic" class="vitals-values"/>
                    </span>
                    <span class="append-to-value">mm/Hg</span>
                </ifMode>
            </span>
        </div>

        <div>
            <label>
                <uimessage code="mirebalais.vitals.short.heartRate.title"/>
            </label>
            <span class="small">
                <obs conceptId="CIEL:5087" id="heart_rate" class="vitals-values"
                     showUnits="emr.units.perMinute" unitsCssClass="append-to-value"/>
            </span>
        </div>

        <div>
            <label>
                <uimessage code="mirebalais.vitals.respiratoryRate.short.title"/>
            </label>
            <span class="small">
                <obs conceptId="CIEL:5242" id="respiratory_rate" class="vitals-values"
                     showUnits="emr.units.perMinute" unitsCssClass="append-to-value"/>
            </span>
        </div>

        <div>
            <label>
                <uimessage code="Temp"/>
            </label>
            <span class="small">
                <obs conceptId="CIEL:5088" id="temperature_c" class="vitals-values"
                     showUnits="emr.units.degreesCelsius" unitsCssClass="append-to-value"/>
            </span>
        </div>

        <div>
            <label>
                <uimessage code="o2Sat"/>
            </label>
            <span class="small">
                <obs conceptId="CIEL:5092" id="o2_sat" class="vitals-values"
                     showUnits="emr.units.percent" unitsCssClass="append-to-value"/>
            </span>
        </div>

        <div>
            <label>
                <uimessage code="FHR"/>
            </label>
            <span class="small">
                <obs conceptId="CIEL:1440" id="fhr" class="vitals-values"
                     showUnits="true" unitsCssClass="append-to-value"/>
            </span>
        </div>
    </div>

    <br/>

    <table>
        <tr>
            <td></td>
            <th>
                Normal<br/>(Green: 4 hours)
            </th>
            <th>
                Urgent<br/>(Yellow: 30 minutes)
            </th>
            <th>
                Emergency<br/>(Red: Immediately)
            </th>
        </tr>

        <tr class="exam">
            <th>
                <label>Airway</label>
            </th>
            <td>
                <obs class="normalObs greenObs" conceptId="PIH:20030" style="checkbox"
                     answerConceptId="PIH:20032" answerCode="Patent"/>
            </td>
            <td>
            </td>
            <td>
                <obs class="abnormalObs redObs" conceptId="PIH:20030" style="checkbox"
                     answerConceptId="CIEL:164348" answerCode="Obstructed labor"/>
            </td>
        </tr>

        <tr class="exam">
            <th>
                <label>Disability</label>
            </th>
            <td>
                <obs class="normalObs greenObs" conceptId="CIEL:162558" style="checkbox"
                     answerConceptId="CIEL:160282" answerCode="Alert"/>
            </td>
            <td>
                <repeat>
                    <template>
                        <obs class="abnormalObs yellowObs" conceptId="CIEL:162558" style="checkbox"
                             answerConceptId="{cId}" answerCode="{labelTag}"/>
                    </template>
                    <render cId="CIEL:118938" labelTag="Blurred vision" />
                </repeat>
            </td>
            <td>
                <repeat>
                    <template>
                        <obs class="abnormalObs redObs" conceptId="CIEL:162558" style="checkbox"
                             answerConceptId="{cId}" answerCode="{labelTag}"/>
                    </template>
                    <render cId="CIEL:139081" labelTag="Severe headache" />
                    <render cId="CIEL:113054" labelTag="Convulsing" />
                    <render cId="CIEL:144576" labelTag="Coma" />
                </repeat>
            </td>
        </tr>

        <tr class="exam">
            <th>
                <label>Events</label>
            </th>
            <td>
                <obs class="normalObs greenObs" conceptId="CIEL:165372" style="checkbox"
                     answerConceptId="CIEL:1115" answerCode="Uneventful"/>
            </td>
            <td>
                <repeat>
                    <template>
                        <obs class="abnormalObs yellowObs" conceptId="CIEL:165372" style="checkbox"
                             answerConceptId="{cId}" answerCode="{labelTag}"/>
                    </template>
                    <render cId="CIEL:110548" labelTag="Spotting" />
                    <render cId="CIEL:162193" labelTag="Labor" />
                    <render cId="PIH:20051" labelTag="SROM &gt;24h" />
                    <render cId="CIEL:151" labelTag="Abdominal pain" />
                </repeat>
            </td>
            <td>
                <repeat>
                    <template>
                        <obs class="abnormalObs redObs" conceptId="CIEL:165372" style="checkbox"
                             answerConceptId="{cId}" answerCode="{labelTag}"/>
                    </template>
                    <render cId="CIEL:147232" labelTag="Vaginal bleeding" />
                    <render cId="CIEL:165217" labelTag="Labor with imminent delivery" />
                    <render cId="CIEL:165271" labelTag="Severe abdominal pain" />
                </repeat>
            </td>
        </tr>

        <tr class="exam">
            <th>
                <label>Fetus</label>
            </th>
            <td>
                <obs class="normalObs greenObs" conceptId="PIH:20033" style="checkbox"
                     answerConceptId="CIEL:162108" answerCode="Moving (>24wks)"/>
            </td>
            <td>
                <obs class="abnormalObs yellowObs" conceptId="PIH:20033" style="checkbox"
                     answerConceptId="CIEL:113377" answerCode="Decreased FM"/>
            </td>
            <td>
                <obs class="abnormalObs redObs" conceptId="PIH:20033" style="checkbox"
                answerConceptId="CIEL:1452" answerCode="Absent FM"/>
            </td>
        </tr>
    </table>

    <br/>

    <p class="list-inline">
        <label>
            <uimessage code="Other complaints:" />
        </label>
        <obs conceptId="CIEL:1119"
             id="complaints"
             style="radio"
             answerConceptIds="CIEL:133632,CIEL:133473,PIH:OTHER"
             answerCodes="Back/musculo-skeletal pain,Nausea/vomiting,other">
            <controls>
                <when value="PIH:OTHER" thenDisplay="#other-complain"/>
            </controls>
        </obs>
        <obs conceptId="PIH:14679" id="other-complain" style="text"/>
    </p>

    <div class="ebolaDiv exam">
        <p class="list-inline">
            <label>
                <uimessage code="Ebola screen:" />
            </label>
            <repeat>
                <template>
                    <obs conceptId="PIH:12245" style="checkbox"
                         answerConceptId="{cId}" class="{isolationClass}"/>
                </template>
                <render cId="CIEL:140238" labelTag="Fever" isolationClass="isolation"/>
                <render cId="CIEL:127777" labelTag="Red eyes" isolationClass="non-isolation"/>
                <render cId="CIEL:158843" labelTag="Sore throat" isolationClass="non-isolation"/>
                <render cId="CIEL:512" labelTag="Rash" isolationClass="isolation"/>
                <render cId="CIEL:147241" labelTag="Unexplained bleeding" isolationClass="isolation"/>
                <render cId="CIEL:142412" labelTag="Diarrhea" isolationClass="isolation"/>
            </repeat>
        </p>
    </div>

    <label>
        <uimessage code="pihcore.tbscreen.title"/> <ifMode mode="VIEW" include="false"> (If all 4 symptoms are present, patient isolation and urgent review.) <font style="color:red">(required)</font></ifMode>
    </label>
    <div class="tbScreen five-columns">
        <div></div>
        <repeat with="['Cough > 2 weeks','11567'], ['Fever','5945'], ['Night sweat','6029'],['Weight loss','6477']">
            <div>
                <p class="list-inline">
                    <!-- TB symptom -->
                    <label><uimessage code="{0}"/>:&amp;nbsp;&amp;nbsp;</label>
                    <obs conceptIds="PIH:11563,PIH:11564"
                         style="radio"
                         answerConceptId="PIH:{1}"
                         conceptLabels="yes,no"
                         labelText=""/>
                </p>
            </div>
        </repeat>
    </div>
    <div id="isolationMsg">
        Patient needs isolation and urgent review by infectious disease team.
    </div>
    <div class="boundary"></div>
    <div class="referralService">
        <p class="list-inline">
            <label>
               Admit to:
            </label>
            <obsgroup groupingConceptId="PIH:HUM Disposition construct" hiddenConceptId="PIH:HUM Disposition categories" hiddenAnswerConceptId="PIH:ADMIT TO HOSPITAL">
                <obs conceptId="PIH:Admission location in hospital"
                     style="location"
                     class="emergencyQueue"
                     answerLocationTags="Maternal Admission Location"
                     restrictToCurrentVisitLocation="true"
                />
            </obsgroup>
        </p>
    </div>

    <div class="boundary"></div>

    <ifMode mode="VIEW" include="false">
        <div id="buttons">
            <button class="submitButton confirm right" onclick="submitHtmlForm()"><uimessage code="mirebalais.save"/><i class="icon-spinner icon-spin icon-2x" style="display: none; margin-left: 10px;"></i></button>
            <button type="button" class="cancel"><uimessage code="emr.cancel"/></button>
        </div>
    </ifMode>
</htmlform>
